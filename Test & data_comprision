#swapping numbers
x=2
y=3
z=9
print(f"before swapping x={x},y={y},z={z}")
s=x
x=y
y=z
z=s
print(f"after swapping x={x},y={y},z={z}")
###
#arrange numbers from the biggest to the smallest

n1 = int(input(" Enter First Number :"))
n2 = int(input(" Enter First Number :"))
n3 = int(input(" Enter First Number :"))
    
arr = [n1,n2,n3]
arr.sort()# ترتيب من الاصغر للاكبر
arr.reverse()# نعكس الترتيب
print(arr)
###
#Write a Python program to multiply all the items in a list
items=[1,2,-8]
tot = 1
for x in items:
    tot *= x
print(tot)
###
#max num in a list
mlist=[1,2,-8,0]
max = mlist[ 0 ]
for a in mlist:
    if a > max:
     max = a
print(max)
###
# creating an empty list
lst = []

# number of elements as input
n = int(input("Enter number of elements : "))

# iterating till the range
for i in range(0, n):
	ele = int(input("enter list elements:  "))

	lst.append(ele) # adding the element
	
print(lst)
##################################
### task classes
class Car:
  def __init__(self,color,model,year,energy):
      self.color=color
      self.model=model
      self.year=year
      self.energy=energy
  def condition(self):
      if self.year >= 2015:
          print("it is in a good condition")
      else:
          print("it is in a bad condition")
  def type(self):
     if self.model=="kia" :
         print("good model")
     else:
         print("not a good model")
car1=Car("red","kia",2018,"hybrid")
car2=Car("blue","sheforleh",2020,"high")
car3=Car("black","toyota",2013,"low")
print("car1: ",car1.energy)
car1.condition()
car1.type()
print("car3: ",car3.energy)
car3.condition()
car3.type()
print("car2: ",car2.energy)
car2.condition()
car2.type()
#################################
import random
names=["nouran","norseen","omar","hady","acthonoha","ahmed","EG","KSA"]
randomname=random.choice(names)
print("random name is :",randomname)
randomnum=random.randint(1,30)
print("random number id : ",randomnum)
####################################
#try & except
try:
    num=int(input("enter a number: "))
    print("the number is :",num)
    f=open("python.text",'r')
    print(f.read())
except ValueError:
    print("value is error")
except FileNotFoundError:
    print("the document not found")
#############################
# shannon_fano algorithem 
class Char:
    def __init__(self,name,freq):
        self._name=name
        self._freq=freq
        self._code=""
    def __lt__(self,other):
        return True if self._freq<other.get_freq()else False
    def __str__(self):
        return "{0}\t {1}\t {2}".format(self._name,str(self._freq),self._code)
    def get_freq(self):
        return self._freq
    def get_code(self):
        return self._code
    def append_code(self,code):
        self._code+= str(code)
def find_middle(lst): 
# s= total k= first half b= second half
# p=  frequancy of elements in the first half of list j= frequancy of elements in the second half in the list
    if len(lst)==1: return None
    s=k=b=0
    for p in lst: s+=p.get_freq()
    s /=2
    for p in range(len(lst)):
        k+=lst[p].get_freq()
        if k==s:return p
        elif k>s :
          j=len(lst)-1
          while b<s:
            b+= lst[j].get_freq()
            j-=1
        return p if abs(s-k)< abs(s-b)else j
def shannon_fano(lst):
    middle= find_middle(lst)
    if middle is None: return
    for i in lst[: middle + 1]:
        i.append_code(0)
    shannon_fano(lst[: middle + 1])
    for i in lst[middle + 1:]:
        i.append_code(1)
    shannon_fano(lst[middle + 1 :])    
    
def output():
    lst=list()
    lst.append(Char('A',0.22))
    lst.append(Char('B',0.28))
    lst.append(Char('C',0.15))
    lst.append(Char('D',0.30))
    lst.append(Char('E',0.05))
    
    lst.sort(reverse=True)
    shannon_fano(lst)
    print('char','freq','code')
    for c in lst:
        print(c)

output()
          



















